import getWindow from "./getWindow.js";
import getNodeName from "./getNodeName.js";
import getComputedStyle from "./getComputedStyle.js";
import {
    isHTMLElement
} from "./instanceOf.js";
import isTableElement from "./isTableElement.js";
import getParentNode from "./getParentNode.js";
import getDocumentElement from "./getDocumentElement.js";

function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
        getComputedStyle(element).position === 'fixed') {
        return null;
    }

    var offsetParent = element.offsetParent;

    if (offsetParent) {
        var html = getDocumentElement(offsetParent);

        if (getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && getComputedStyle(html).position !== 'static') {
            return html;
        }
    }

    return offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
    var Node = getParentNode(element);

    while (isHTMLElement(Node) && ['html', 'body'].indexOf(getNodeName(Node)) < 0) {
        var css = getComputedStyle(Node); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.

        if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') {
            return Node;
        } else {
            Node = Node.parentNode;
        }
    }

    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


export default function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static') {
        return window;
    }

    return offsetParent || getContainingBlock(element) || window;
}